{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["storiesAPIKey","theme","palette","primary","main","secondary","useStyles","makeStyles","app","textAlign","height","width","footer","background","paper","position","bottom","boxShadow","shadows","button","color","default","container","footerLogo","maxHeight","typography","h1","fontSize","maxWidth","light","opacity","padding","spacing","LandingPage","apiKey","id","endpoint","urlFormatter","style","StoryPage","props","match","params","storyId","collection","options","logo","Button","href","alt","src","Footer","classes","className","Grid","justify","alignItems","item","xs","target","Typography","variant","Date","getYear","size","Boolean","window","location","hostname","ReactDOM","render","hashType","createMuiTheme","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAIaA,EAAgB,4CAGhBC,EAAQ,CACnBC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,aCANE,EAAYC,aAAW,SAAAN,GAAK,MAAK,CACrCO,IAAK,CACHC,UAAW,SACXC,OAAQ,QACRC,MAAO,SAETC,OAAQ,CACNC,WAAYZ,EAAMC,QAAQW,WAAWC,MACrCC,SAAU,QACVC,OAAQ,EACRL,MAAO,OACPM,UAAWhB,EAAMiB,QAAQ,IAE3BC,OAAQ,CACNC,MAAOnB,EAAMC,QAAQW,WAAWQ,SAElCC,UAAW,CACTX,MAAO,QAETY,WAAW,CACTC,UAAWvB,EAAMwB,WAAWC,GAAGC,SAC/BC,SAAU,QAEZC,MAAM,CACJC,QAAS,GACTC,QAAS9B,EAAM+B,QAAQ,QAKrBC,EAAc,kBAClB,6BACE,kBAAC,uBAAD,CACEC,OAAQlC,EACRmC,GD1CgC,EC2ChCC,SD7C4B,0CC8C5BC,aAAa,SAEf,yBAAKC,MAAO,CAACP,QAAS,OACtB,kBAAC,EAAD,QAIEQ,EAAY,SAACC,GAAD,OAChB,kBAAC,IAAD,CACEN,OAAQlC,EACRmC,GAAIK,EAAMC,MAAMC,OAAOC,QACvBC,WDvDkC,ECwDlCR,SD1D8B,0CC2D9BS,QAAS,CAACC,KACR,kBAACC,EAAA,EAAD,CAAQC,KAAK,KACX,yBAAKC,IAAI,iBAAiBC,ID/Dd,6FC+DyBZ,MAAO,CAAC3B,MAAO,eAMtDwC,EAAS,SAACX,GACd,IAAMY,EAAU9C,IAEhB,OACE,4BAAQ+C,UAAWD,EAAQxC,QACzB,kBAAC0C,EAAA,EAAD,CAAMhC,WAAS,EAAC+B,UAAWD,EAAQ9B,UAAWiC,QAAQ,SAASC,WAAW,UACxE,kBAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GACb,kBAACX,EAAA,EAAD,CAAQM,UAAWD,EAAQjC,OAAQ6B,KD7EnB,kCC6EqCW,OAAO,UAC1D,yBACEN,UAAWD,EAAQ7B,WACnB0B,IAAI,6BACJC,ID/EkB,0ECmFxB,kBAACI,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAGL,UAAWD,EAAQvB,OACnC,kBAAC+B,EAAA,EAAD,CAAYC,QAAQ,WAApB,QACU,MAAO,IAAIC,MAAOC,UAD5B,2BAEE,kBAAChB,EAAA,EAAD,CACEiB,KAAK,QACL5C,MAAM,YACN4B,KAAK,2BACLW,OAAO,UAJT,mCC5EQM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3B,MACvB,2DCZN4B,IAASC,OAAO,mBFiGD,WACb,IAAMlB,EAAU9C,IAChB,OACE,kBAAC,IAAD,CAAYiE,SAAS,WACnB,kBAAC,IAAD,CAAkBtE,MAAOuE,YAAevE,IACtC,yBAAKoD,UAAWD,EAAQ5C,KACtB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiE,KAAK,YAAYC,UAAWnC,IACnC,kBAAC,IAAD,CAAOkC,KAAK,IAAIC,UAAWzC,UEzGvB,MAAS0C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.6ef156c8.chunk.js","sourcesContent":["export const projectUrl = \"https://www.wechanged.ugent.be/\";\nexport const logo = \"https://www.wechanged.ugent.be/wp-content/uploads/2015/12/agentsofchange_logo_baseline.png\";\nexport const affiliationLogos = \"https://www.wechanged.ugent.be/wp-content/uploads/2018/09/logos.png\";\nexport const storiesAPIEndpoint = \"https://stories-api-stage.herokuapp.com\";\nexport const storiesAPIKey = \"rf9qXEDE.SqlziAxtY58fTbSyx2MoKz2naXO9UlvE\";\nexport const storiesAPICollectionId = 2;\n\nexport const theme = {\n  palette: {\n    primary: {\n      main: '#205d91'\n    },\n    secondary: {\n      main: '#da5055'\n    }\n  }\n};\n","import React from 'react';\nimport {\n  Button, createMuiTheme, Grid, MuiThemeProvider, makeStyles, Typography\n} from '@material-ui/core';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport StoriesAPIStory, { StoriesAPICollection } from 'react-stories-api';\n\nimport {\n  affiliationLogos, logo, projectUrl, storiesAPICollectionId,\n  storiesAPIEndpoint, storiesAPIKey, theme,\n} from \"./constants\";\n\n\nconst useStyles = makeStyles(theme => ({\n  app: {\n    textAlign: \"center\",\n    height: \"100vh\",\n    width: \"100vw\",\n  },\n  footer: {\n    background: theme.palette.background.paper,\n    position: \"fixed\",\n    bottom: 0,\n    width: \"100%\",\n    boxShadow: theme.shadows[4],\n  },\n  button: {\n    color: theme.palette.background.default,\n  },\n  container: {\n    width: \"100%\",\n  },\n  footerLogo:{\n    maxHeight: theme.typography.h1.fontSize,\n    maxWidth: \"100%\",\n  },\n  light:{\n    opacity: .5,\n    padding: theme.spacing(1)\n  }\n}));\n\n\nconst LandingPage = () => (\n  <div>\n    <StoriesAPICollection\n      apiKey={storiesAPIKey}\n      id={storiesAPICollectionId}\n      endpoint={storiesAPIEndpoint}\n      urlFormatter=\"#$id\"\n    />\n    <div style={{padding: 100}} />\n    <Footer />\n  </div>\n);\n\nconst StoryPage = (props) => (\n  <StoriesAPIStory\n    apiKey={storiesAPIKey}\n    id={props.match.params.storyId}\n    collection={storiesAPICollectionId}\n    endpoint={storiesAPIEndpoint}\n    options={{logo: (\n      <Button href=\"#\">\n        <img alt=\"WeChangEd Logo\" src={logo} style={{width: \"100%\"}}/>\n      </Button>\n    )}}\n  />\n)\n\nconst Footer = (props) => {\n  const classes = useStyles();\n\n  return (\n    <footer className={classes.footer}>\n      <Grid container className={classes.container} justify=\"center\" alignItems=\"center\">\n        <Grid item xs={4}>\n          <Button className={classes.button} href={projectUrl} target=\"_blank\">\n            <img\n              className={classes.footerLogo}\n              alt=\"WeChangEd Affiliates Logos\"\n              src={affiliationLogos}\n            />\n          </Button>\n        </Grid>\n        <Grid item xs={7} className={classes.light}>\n          <Typography variant=\"caption\">\n            &copy; {1900 + new Date().getYear()} , In Collaboration with\n            <Button\n              size=\"small\"\n              color=\"secondary\"\n              href=\"http://sciencestories.io\"\n              target=\"_blank\"\n              >\n              The ScienceStories.io Team\n            </Button>\n          </Typography>\n        </Grid>\n      </Grid>\n    </footer>\n  );\n};\n\nexport default function App() {\n  const classes = useStyles();\n  return (\n    <HashRouter hashType=\"noslash\">\n      <MuiThemeProvider theme={createMuiTheme(theme)}>\n        <div className={classes.app}>\n          <Switch>\n            <Route path=\"/:storyId\" component={StoryPage} />\n            <Route path=\"/\" component={LandingPage} />\n          </Switch>\n        </div>\n      </MuiThemeProvider>\n    </HashRouter>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}